package com.diit.ds.web;

import com.diit.ds.domain.req.RAGFlowFileDeleteReq;
import com.diit.ds.domain.req.RAGFlowFileListReq;
import com.diit.ds.domain.req.RAGFlowFileParseReq;
import com.diit.ds.domain.resp.RAGFlowFileDeleteResp;
import com.diit.ds.domain.resp.RAGFlowFileListResp;
import com.diit.ds.domain.resp.RAGFlowFileParseResp;
import com.diit.ds.domain.resp.RAGFlowFileUploadResp;
import com.diit.ds.service.RAGFlowFileAPIService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayOutputStream;

/**
 * RAGFlow文件API测试控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/ragflow/files")
public class RAGFlowFileAPIController {

    private final RAGFlowFileAPIService ragFlowFileAPIService;

    /**
     * 上传文件
     * @param datasetId 数据集ID
     * @param files 文件列表
     * @return 上传结果
     */
    @PostMapping("/upload/{datasetId}")
    public RAGFlowFileUploadResp uploadFiles(@PathVariable String datasetId, 
                                           @RequestParam("files") MultipartFile[] files) {
        return ragFlowFileAPIService.uploadFiles(datasetId, files);
    }
    
    /**
     * 下载文件
     * @param datasetId 数据集ID
     * @param documentId 文档ID
     * @return 文件流
     */
    @GetMapping("/download/{datasetId}/{documentId}")
    public ResponseEntity<InputStreamResource> downloadFile(@PathVariable String datasetId, 
                                                         @PathVariable String documentId) {
        try {
            // 使用内存输出流接收文件数据
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            boolean success = ragFlowFileAPIService.downloadFile(datasetId, documentId, outputStream);
            
            if (!success) {
                return ResponseEntity.notFound().build();
            }
            
            // 设置响应头
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
            headers.setContentDispositionFormData("attachment", documentId);
            
            // 返回文件流
            InputStreamResource resource = new InputStreamResource(
                    new java.io.ByteArrayInputStream(outputStream.toByteArray()));
            return ResponseEntity.ok()
                    .headers(headers)
                    .body(resource);
        } catch (Exception e) {
            log.error("下载文件失败", e);
            return ResponseEntity.internalServerError().build();
        }
    }
    
    /**
     * 查看文件列表
     * @param datasetId 数据集ID
     * @param page 页码
     * @param pageSize 每页条数
     * @param orderby 排序字段
     * @param desc 是否降序
     * @param keywords 关键词
     * @param id 文件ID
     * @param name 文件名
     * @return 文件列表
     */
    @GetMapping("/list/{datasetId}")
    public RAGFlowFileListResp listFiles(@PathVariable String datasetId,
                                         @RequestParam(required = false) Integer page,
                                         @RequestParam(required = false) Integer pageSize,
                                         @RequestParam(required = false) String orderby,
                                         @RequestParam(required = false) Boolean desc,
                                         @RequestParam(required = false) String keywords,
                                         @RequestParam(required = false) String id,
                                         @RequestParam(required = false) String name) {
        // 构建请求对象
        RAGFlowFileListReq req = RAGFlowFileListReq.builder()
                .page(page)
                .pageSize(pageSize)
                .orderby(orderby)
                .desc(desc)
                .keywords(keywords)
                .id(id)
                .name(name)
                .build();
        
        return ragFlowFileAPIService.listFiles(datasetId, req);
    }
    
    /**
     * 删除文件
     * @param datasetId 数据集ID
     * @param req 删除请求
     * @return 删除结果
     */
    @DeleteMapping("/delete/{datasetId}")
    public RAGFlowFileDeleteResp deleteFiles(@PathVariable String datasetId,
                                            @RequestBody RAGFlowFileDeleteReq req) {
        return ragFlowFileAPIService.deleteFiles(datasetId, req);
    }
    
    /**
     * 开始解析文件任务
     * @param datasetId 数据集ID
     * @param req 解析请求
     * @return 解析结果
     */
    @PostMapping("/parse/start/{datasetId}")
    public RAGFlowFileParseResp startParseTask(@PathVariable String datasetId,
                                            @RequestBody RAGFlowFileParseReq req) {
        return ragFlowFileAPIService.startParseTask(datasetId, req);
    }
    
    /**
     * 停止解析文件任务
     * @param datasetId 数据集ID
     * @param req 停止解析请求
     * @return 停止结果
     */
    @DeleteMapping("/parse/stop/{datasetId}")
    public RAGFlowFileParseResp stopParseTask(@PathVariable String datasetId,
                                          @RequestBody RAGFlowFileParseReq req) {
        return ragFlowFileAPIService.stopParseTask(datasetId, req);
    }
} 